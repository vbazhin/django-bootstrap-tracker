#coding: utf-8
from django.template.loader import get_template
from django.template import Context
from django.http import HttpResponse
from django.shortcuts import render_to_response
from django.http import HttpResponseRedirect
from django.shortcuts import redirect
from desk.models import Trad, Comment, DelegatedNames
from django.conf import settings
from django import forms
from django.core.mail import send_mail
from django.core.urlresolvers import reverse
from markitup.widgets import MarkItUpWidget, MarkupTextarea
from tracker import settings
import datetime
from django.core import serializers
import json
import mptt
from mptt.models import TreeForeignKey, MPTTModel
from django.db import connection
from django.contrib.auth.models import User
from django.forms.fields import DateField, ChoiceField, MultipleChoiceField
from django.forms.widgets import RadioSelect, CheckboxSelectMultiple
from django.forms.extras.widgets import SelectDateWidget


#To do –ù—É–∂–Ω–æ, —á—Ç–æ–±—ã –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —Å–∞–º–æ–º—É —Å–µ–±–µ


class CommentForm(forms.Form):
    text = forms.CharField(widget=MarkItUpWidget())


    
    

import datetime


def define_condition_isexp(trad): 
    trad.left = trad.left()
    trad.leftdays = trad.left.days
    trad.lefthours = trad.left.seconds/3600
    trad.leftminutes = trad.left.seconds/60
    if trad.status == 'done':
        trad.condition = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ—Å—Ç—É–ø–∏–ª–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
        trad.icon = 'ok'
        trad.alert = 'success'
    elif trad.status == 'success':
        trad.condition = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'
        trad.icon = 'ok'
        trad.alert = 'success'
    elif trad.status == 'closed':
        trad.condition = '–ó–∞–∫—Ä—ã—Ç–æ'
        trad.icon = 'ban-circle'
        trad.alert = 'none'

    else: 
        if trad.left > datetime.timedelta(0):
            if trad.status == 'taken':
                trad.condition = '–í —Ä–∞–±–æ—Ç–µ'
                trad.icon = 'cog'
                trad.alert = 'info'
            elif trad.status == 'new':
                trad.condition = '–ù–æ–≤–æ–µ'
                trad.icon = 'exclamation-sign'
                trad.alert = 'new'
        else:
            trad.condition = '–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
            trad.icon = 'remove'
            if trad.status != 'error':
                trad.status = 'error'
                trad.save()
            trad.alert = 'error'
            
def define_condition_noexp(trad): 
    if trad.status == 'done':
        trad.condition = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ—Å—Ç—É–ø–∏–ª–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
        trad.icon = 'ok'
        trad.alert = 'success'
    elif trad.status == 'success':
        trad.condition = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'
        trad.icon = 'ok'
        trad.alert = 'success'
    elif trad.status == 'closed':
        trad.condition = '–ó–∞–∫—Ä—ã—Ç–æ'
        trad.icon = 'ban-circle'
        trad.alert = 'none'
    elif trad.status == 'taken':
        trad.condition = '–í —Ä–∞–±–æ—Ç–µ'
        trad.icon = 'cog'
        trad.alert = 'info'
    elif trad.status == 'new':
        trad.condition = '–ù–æ–≤–æ–µ'
        trad.icon = 'exclamation-sign'
        trad.alert = 'new'



            
from django.contrib.auth.decorators import login_required
            
from django.contrib import auth

# Login - –¥–µ—Ñ–æ–ª—Ç
from django.core.mail import send_mail
def invite(request):
    if request.is_ajax():
        user_name = request.POST.get('user')
        user_email = request.POST.get('email')
        delegated_name = DelegatedNames(name = 'aa', email = 'v.bazhin@gmail.com')
        delegated_name.save()
        delegated_name.send_invite()
        return HttpResponse(user_name, user_email)
    
def logout(request):
    auth.logout(request)
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏– –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    return HttpResponseRedirect("/")
    
def login(request):
    auth.login(request)
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    return HttpResponseRedirect("/")
            
@login_required
def index(request, fltr = 'all'): # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if fltr == 'all':
        trads = Trad.objects.filter(receiver = request.user)
    #elif trad.left < datetime.timedelta(0) and trad.status != 'done':
        #trads = Trad.objects.filter(receiver = request.user, status = 'error')
    elif fltr == 'current':
        trads = Trad.objects.filter(receiver = request.user, status = 'new') | Trad.objects.filter(receiver = request.user, status = 'taken') | Trad.objects.filter(receiver = request.user, status = 'done') 
    elif fltr == 'check':
        trads = Trad.objects.filter(author = request.user, status = 'done')
    elif fltr == 'givenbyme':
        trads = Trad.objects.filter(author = request.user)
    else:
        trads = Trad.objects.filter(receiver = request.user, status = fltr)
    for trad in trads:
        if trad.is_expiration == "Yes":
            define_condition_isexp(trad)
            delta0 = trad.expiration - trad.given
            delta1 = datetime.datetime.now() - trad.given
            trad.time = (delta1.total_seconds()/delta0.total_seconds())*100
        else:
            define_condition_noexp(trad)

    new_num =   Trad.objects.filter(receiver = request.user, status = 'new').count()
    taken_num =   Trad.objects.filter(receiver = request.user, status = 'taken').count()
    check_num = Trad.objects.filter(author = request.user, status = 'done').count()
    oncheck_num = Trad.objects.filter(receiver = request.user, status = 'done').count()

    if request.method == 'POST':
        form = AddTrad(request.POST)
        if form.is_valid():
            cd = form.cleaned_data
            expdate = cd['expdate']
            exptime = cd['exptime']    
            if expdate == None:
                exp_value = 'No'
                exp = None
            else:
                exp_value = 'Yes'
                exp = datetime.datetime.combine(expdate, exptime)

            #if exptime == None:
                #is_exp = 'No'

            new_trad = Trad(label = cd['label'], text = cd['text'], given=datetime.datetime.now(), is_expiration = exp_value, expiration=exp, status='new', author = request.user) # –ü–æ–º–µ–Ω—è—Ç—å date - now(), expiration - –∑–∞–±–∏–≤–∞–µ—Ç—Å—è
            new_trad.save()
            
            receivers = cd['receiver']
            if not receivers:
                receivers = User.objects.all()
            new_trad.receiver = receivers
            return HttpResponseRedirect("/")
    else:
        form = AddTrad()
    today = datetime.date.today()
    tomorrow = datetime.date(today.year, today.month, today.day + 1)
    return render_to_response('index.html', {'trads': trads, 'form': form, 'user' : request.user, 'tomorrow' : tomorrow.isoformat(), 'new_num': new_num, 'taken_num': taken_num, 'check_num': check_num, 'oncheck_num': oncheck_num })

from django.contrib.auth.forms import UserCreationForm

def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            new_user = form.save()
            return HttpResponseRedirect("/accounts/login")
    else:
        form = UserCreationForm()
    return render_to_response("registration/register.html", {
        'form': form,
    })

class AddTrad(forms.Form):
    label = forms.CharField(widget=forms.TextInput(attrs={'style':'width:597px;'}))
    text = forms.CharField(required=False, widget=MarkItUpWidget(attrs={'style':'width: 99%; height:105px;'}))
    receiver = forms.ModelMultipleChoiceField(required=False, queryset=User.objects.all(), widget=forms.SelectMultiple(attrs={'style':'width:300px; height:200px;'}))
    expdate = forms.DateField(required=False)
    exptime = forms.TimeField(required=False)
    
    
def show_trad(request, related_trad):
    trad = Trad.objects.get(pk = related_trad)
    if trad.is_expiration == "Yes":
        define_condition_isexp(trad)
    else:
        define_condition_noexp(trad)
    trad_status = trad.status
    if request.user in trad.receiver.all():
        user_status = 'receiver'
    if request.user == trad.author:
        user_status = 'author'


    comments = Comment.objects.filter(trad = related_trad)
    if request.method == 'POST':
        if 'take' in request.POST:
            comment = Comment(text = u'–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ' + request.user.username, date = datetime.datetime.now(), trad_id = related_trad,  author = request.user)
            trad.status = 'taken'
        elif 'refuse' in request.POST:
            comment = Comment(text = u'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + request.user.username + u' –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–¥–∞–Ω–∏—è', date = datetime.datetime.now(), trad_id = related_trad,  author = request.user)
            trad.status = 'refused'
        elif 'done' in request.POST:
            comment = Comment(text = u'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + request.user.username + u' –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ', date = datetime.datetime.now(), trad_id = related_trad,  author = request.user)
            trad.status = 'done'
        elif 'success' in request.POST:
            comment = Comment(text = u'–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ' + request.user.username, date = datetime.datetime.now(), trad_id = related_trad,  author = request.user)
            trad.status = 'success'
        elif 'close' in request.POST:
            comment = Comment(text = u'–ó–∞–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ' + request.user.username, date = datetime.datetime.now(), trad_id = related_trad,  author = request.user)
            trad.status = 'closed'
        elif 'setback' in request.POST:
            comment = Comment(text = u'–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ' + request.user.username, date = datetime.datetime.now(), trad_id = related_trad,  author = request.user)
            trad.status = 'new'
        elif 'delete' in request.POST:
             trad.delete()
        elif 'comment' in request.POST:
            form = CommentForm(request.POST)
            if form.is_valid():
                cd = form.cleaned_data
                comment = Comment(text = cd['text'], date = datetime.datetime.now(), trad_id = related_trad,  author = request.user)
        try:
            trad.save()
            comment.save()
            return HttpResponseRedirect("")
        except:
            return '–ù–µ –≤—ã—à–ª–æ'

    else:
        form = CommentForm()
    return render_to_response('trad.html', {'trad': trad, 'comments': comments, 'user_status': user_status, 'trad_status': trad_status,  'receivers' : trad.receiver.all(), 'form': CommentForm()})
    
    
    

    
    
